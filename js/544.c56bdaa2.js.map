{"version":3,"file":"js/544.c56bdaa2.js","mappings":";;;;AAGA,MAAMA,EAAc,cACdC,EAAgB,gBAChBC,EAAa,CAAC,MAAO,YAAa,QAAS,SAAU,IAAK,QAAS,QAAS,YAAa,aAAc,UAAW,OAAQ,OAC1HC,EAAqBC,IACzB,IAAIC,EAAe,GACfC,GAAe,EACnB,MAAMC,EAAM,EAAWH,EAAOI,WAAaC,SACrCC,EAAO,GAAoBD,SAASE,KACpCC,EAAYC,IAChBR,EAAaS,SAAQC,GAAMA,EAAGC,UAAUC,OAAOjB,KAC/Ca,EAASC,SAAQC,GAAMA,EAAGC,UAAUE,IAAIlB,KACxCK,EAAeQ,GAEXM,EAAc,KAClBb,GAAe,EACfM,EAAS,KAELQ,EAAaC,IACjBf,EAAeJ,EAAWoB,SAASD,EAAGE,KACjCjB,GACHM,EAAS,KAGPY,EAAaH,IACjB,GAAIf,GAAgBe,EAAGI,aAAc,CACnC,MAAMC,EAAUL,EAAGI,eAAeE,QAAQZ,KACpCA,EAAGC,WACED,EAAGC,UAAUY,SAAS3B,KAIjCW,EAASc,KAGPG,EAAa,KACbtB,EAAIuB,gBAAkBpB,GACxBE,EAAS,KAGbL,EAAIwB,iBAAiB,UAAWX,GAChCb,EAAIwB,iBAAiB,UAAWP,GAChCjB,EAAIwB,iBAAiB,WAAYF,GACjCtB,EAAIwB,iBAAiB,aAAcZ,GACnCZ,EAAIwB,iBAAiB,YAAaZ,GAClC,MAAMa,EAAU,KACdzB,EAAI0B,oBAAoB,UAAWb,GACnCb,EAAI0B,oBAAoB,UAAWT,GACnCjB,EAAI0B,oBAAoB,WAAYJ,GACpCtB,EAAI0B,oBAAoB,aAAcd,GACtCZ,EAAI0B,oBAAoB,YAAad,IAEvC,MAAO,CACLa,QAAAA,EACApB,SAAAA","sources":["webpack://GroundCoverMapper/./node_modules/@ionic/core/components/focus-visible.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nconst ION_FOCUSED = 'ion-focused';\nconst ION_FOCUSABLE = 'ion-focusable';\nconst FOCUS_KEYS = ['Tab', 'ArrowDown', 'Space', 'Escape', ' ', 'Shift', 'Enter', 'ArrowLeft', 'ArrowRight', 'ArrowUp', 'Home', 'End'];\nconst startFocusVisible = (rootEl) => {\n  let currentFocus = [];\n  let keyboardMode = true;\n  const ref = (rootEl) ? rootEl.shadowRoot : document;\n  const root = (rootEl) ? rootEl : document.body;\n  const setFocus = (elements) => {\n    currentFocus.forEach(el => el.classList.remove(ION_FOCUSED));\n    elements.forEach(el => el.classList.add(ION_FOCUSED));\n    currentFocus = elements;\n  };\n  const pointerDown = () => {\n    keyboardMode = false;\n    setFocus([]);\n  };\n  const onKeydown = (ev) => {\n    keyboardMode = FOCUS_KEYS.includes(ev.key);\n    if (!keyboardMode) {\n      setFocus([]);\n    }\n  };\n  const onFocusin = (ev) => {\n    if (keyboardMode && ev.composedPath) {\n      const toFocus = ev.composedPath().filter((el) => {\n        if (el.classList) {\n          return el.classList.contains(ION_FOCUSABLE);\n        }\n        return false;\n      });\n      setFocus(toFocus);\n    }\n  };\n  const onFocusout = () => {\n    if (ref.activeElement === root) {\n      setFocus([]);\n    }\n  };\n  ref.addEventListener('keydown', onKeydown);\n  ref.addEventListener('focusin', onFocusin);\n  ref.addEventListener('focusout', onFocusout);\n  ref.addEventListener('touchstart', pointerDown);\n  ref.addEventListener('mousedown', pointerDown);\n  const destroy = () => {\n    ref.removeEventListener('keydown', onKeydown);\n    ref.removeEventListener('focusin', onFocusin);\n    ref.removeEventListener('focusout', onFocusout);\n    ref.removeEventListener('touchstart', pointerDown);\n    ref.removeEventListener('mousedown', pointerDown);\n  };\n  return {\n    destroy,\n    setFocus\n  };\n};\n\nexport { startFocusVisible };\n"],"names":["ION_FOCUSED","ION_FOCUSABLE","FOCUS_KEYS","startFocusVisible","rootEl","currentFocus","keyboardMode","ref","shadowRoot","document","root","body","setFocus","elements","forEach","el","classList","remove","add","pointerDown","onKeydown","ev","includes","key","onFocusin","composedPath","toFocus","filter","contains","onFocusout","activeElement","addEventListener","destroy","removeEventListener"],"sourceRoot":""}